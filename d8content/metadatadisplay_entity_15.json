{
  "data": {
    "type": "metadatadisplay_entity--metadatadisplay_entity",
    "id": "9be8473c-3fb3-42ee-aef2-431b2d4f93bb",
    "attributes": {
      "name": "IIIF Presentation API 3 Collection Manifest",
      "twig": "{# \nThis Template generates IIIF 3.0 API Manifest for reative Works Series using a Drupal Views\nJSON to be used by a Drupal Views (REST) to generate a simpler to parse\/join listing of Canvases\nFor a Creative Works Series Manifest\n\nStructures passed from Archipelago are\n- node\n  The full Node entity\n- data\n  The Full JSON Structure converted in an Array\n- iiif_server\n  The publicly available IIIF Server (Global Setting)\n\nSince JSON was decoded into the 'data' values are valid PHP but could not\nbe valid JSON when outputting. So We use data.description|json_encode|raw\nWithout Double quotes.\n#}\n{% set Webserverurl =  url('<front>')|render|replace({':8001\/':''}) ~ ':8183\/iiif\/2\/' %}\n  {% set IIIFserverurl = iiif_server ? iiif_server ~ '\/': Webserverurl %}\n    {% set currenturl = url('<current>')|render %}\n      {% if node.id %}\n          {# this is needed to the View Argument can conform to the format even when no node exists when saving the template #}\n          {% set nodeid = node.id %}\n          {% set nodeurl = url('entity.node.canonical', {'node': node.id}, {'absolute': true}) %}\n      {% else %}\n          {% set nodeid = 1 %} \n          {% set nodeurl = currenturl %}\n      {% endif%}\n            {% set len = language.getId() ? language.getId() : \"en\" %}\n{\n{# Top Object Metadata #}\n\"@context\": [\n  \"http:\/\/www.w3.org\/ns\/anno.jsonld\",\n  \"http:\/\/iiif.io\/api\/presentation\/3\/context.json\"\n],\n\"type\": \"Collection\",\n\"id\": \"{{ currenturl }}\",\n\"label\": {\n\"{{ len }}\": [\n{{ node.label|json_encode|raw }}\n]\n},\n\"requiredStatement\": {\n\"label\": { \"en\": [ \"Attribution\" ] },\n\"value\": { \"en\": [ \"Provided by Archipelago Deployment\" ] }\n},\n\"metadata\": [\n{% for agent in attribute(data, 'edm_agent') %}\n    {\n    \"label\": {\n    \"{{ len }}\": [\n    {{ agent.role_label|json_encode|raw }}\n    ]\n    },\n    \"value\": {\n    \"{{ len }}\": [\n    {{ agent.name_label|json_encode|raw }}\n    ]\n    }\n    },\n{% endfor %}\n{\n\"label\": {\n\"{{ len }}\": [\n\"description\"\n]\n},\n\"value\": {\n\"{{ len }}\": [\n{{ data.description|json_encode|raw }}\n]\n}\n},\n{\n\"label\": {\n\"{{ len }}\": [\n\"navDate\"\n]\n},\n\"value\":  {\n\"{{ len }}\": [\n\"{{ node.getChangedTime|date(\"F jS \\\\a\\\\t g:ia\") }}\"\n]\n}\n},\n{\n\"label\": {\n\"{{ len }}\": [\n\"license\"\n]\n},\n\"value\": {\n\"{{ len }}\": [\n\"http:\/\/rightsstatements.org\/vocab\/InC-EDU\/1.0\/\"\n]\n}\n}\n],\n{% if attribute(data, 'memberof') %}\n    {% set currentnode = 'node\/' ~ data.memberof %}\n    \"within\": \"{{ url(currentnode) }}\",\n{% else %}\n    {% set currentnode = '<current>' %}\n{% endif %}\n{# fetch all children using a View and attach them as Items #}\n  \"items\": [\n{% set collection_view = drupal_view('data_collection_manifest','children_ismemberof_manifest_rest', nodeid)|render %}\n{% set collection_items = collection_view|sbf_json_decode %}\n{% for items in collection_items %}\n{# canvas|json_encode #}\n    {\n    {% if 'CreativeWorkSeries' in items['ado_type']|split(',') %}\n        \"id\": \"{{ url('entity.node.canonical', {'node': items['nid']}, {'absolute': true}) }}\/metadata\/iiifmanifest3cws\/default.jsonld\",\n        \"type\": \"Manifest\",\n     {% elseif 'Collection' in items['ado_type']|split(',') %}\n        \"id\": \"{{ url('entity.node.canonical', {'node': items['nid']}, {'absolute': true}) }}\/metadata\/iiifmanifest3collection\/default.jsonld\",\n        \"type\": \"Collection\",\n    {% else %}\n        \"id\": \"{{ url('entity.node.canonical', {'node': items['nid']}, {'absolute': true}) }}\/metadata\/iiifmanifest\/default.jsonld\",\n        \"type\": \"Manifest\",\n    {% endif %}\n       \"label\": { \"{{len}}\": [ \"{{ items['label'] }}\" ] },\n       {{ items['thumbnail']|raw }}\n    }\n    {{ not loop.last ? ',' : '' }}\n{% endfor %}\n  ]\n}",
      "langcode": "und",
      "mimetype": "application/ld+json"
    }
  }
}